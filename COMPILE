You can compile wxHexEditor-ng with Code::Blocks (C::B) easily.
All you need to install C::B for your OS, required compilation toolset (gcc) and wxHexEditor-ng library for compilation.

But you can also build wxHexEditor-ng from your shell.
For compiling wxHexEditor-ng, without C::B you have to build internal udis and mhash libraries. They are automatically compiled when you run make command.

Please follow those directives under your OS to compile wxHexEditor-ng.
-----------------------------------------------------
LINUX
-----------------------------------------------------
For Linux, make sure you have installed wxWidgets.
Use this command for ubuntu like distros:

   apt-get install libwxgtk<version>-dev

or use your need to use this one for distros like OpenSuSE...

  zypper in wxWidgets-devel

Then extract the wxHexEditor-ng:

  tar xvf wxHexEditor-ng-v<version>-src.tar.bz2
  cd wxHexEditor-ng
  make

you can also use OPTFLAGS and WXCONFIG flags if you have different wx-config name like
  make WXCONFIG=wx-config CPPFLAGS="-fPIC" OPTFLAGS="-O3 -march-native -fopenmp"

Than you could use this command for installing wxHexEditor-ng to your computer.
  make install

-----------------------------------------------------
On Linux Cross-Compiling To WINDOWS
-----------------------------------------------------
If you have Linux installation and want to build Win32/Win64 build of wxHexEditor-ng, follow this guide.
This is how I compile.
First, we need mingw-w64 toolchain. At AUR linux, I use;

  yaourt -S mingw-w64-win-make mingw-w64-win-iconv

This will install all required dependencies mingw-w64-{make,iconv,crt,binutils,winpthreads,headers,cmake,gcc,pkg-config,environment}

I compile the wxWidgets library with a cross compiler:

  tar xvf wxWidgets-<version>.tar.bz2
  cd wxWidgets
  mkdir release
  cd release
  ../configure --enable-{monolithic,static,unicode} --disable-{debug,shared} --host=x86_64-w64-mingw32
  make

Then I extract the wxHexEditor-ng:

  tar xvf wxHexEditor-ng-v<version>-src.tar.bz2
  cd wxHexEditor-ng
  x86_64-w64-mingw32-make win WXCONFIG=<wx-config path> HOST=x86_64-w64-mingw32 CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++

PS: If you face with " _rpl_malloc " error, you can use

  ac_cv_func_malloc_0_nonnull=yes make win WXCONFIG=<wx-congif path> HOST=x86_64-w64-mingw32 CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++

PS2: for 32Bit build, you need to run with HOST=i686-w64-mingw32 instead of HOST=x86_64-w64-mingw32.

-----------------------------------------------------
WINDOWS
-----------------------------------------------------
For generating Windows executables, I use Linux to cross-compile a Windows executable via MinGW.
But you can use windows to compile it also.

*Download latest nightly of Code Blocks compiler from http://forums.codeblocks.org/index.php/board,20.0.html
 With all support files, DLLs etc.

*Download MinGW Toolchains targets Win64 or Win32 from from https://sourceforge.net/projects/mingw-w64/files/
and extract to C:\mingw64

*You can download Headers and Release DLL files also but I prefer building from source code.
If you choose download just Headers and Release DLLs,
than please adjust
C::B->Project->Build options->Win32 Release->Search directories settings. (Also for Debug if needed.)

for build wxWidget from source code:
Download latest wxWidgets source code and extract it to root and remove versioning from en of the directory name.

  PATH=%PATH%c:\mingw64\bin
  cd C:\wxWidgets\build\msw
  mingw32-make -f makefile.gcc BUILD=release MONOLITHIC=1 SHARED=0 USE_XRC=1 -j1

You can increase -j1 for multi-thread building but you need to watch memory to have enough room.
Also C::B->Project->Build options->Win32 Release->Custom variables need wxWidgets path (if you use different version).

Also you need to generate udis86/libudis86/tab.c and tab.h files. I copy this files from linux.
Don't know how to build it via MSW.

-----------------------------------------------------
OS X
-----------------------------------------------------
You can easily install required dependencies and Xcode Commandline Tools with Homebrew installation:
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

After you could install required dependencies with this command:
brew install wxmac gettext autoconf automake libtool

Instead of wxmac library, you might need to compile wxWidgets from source.
Download wxWidgets source to your disk and with:
tar xvf wxWidgets-<version>.tar.bz2
cd wxWidgets
mkdir release
cd release
../configure --with-osx_cocoa \
    --with-macosx-version-min=10.9 \
    --with-macosx-sdk=/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk \
    --disable-shared  --disable-mediactrl --with-{zlib,expat,libpng,libtiff}=builtin \
    --with-opengl --enable-{unicode,monolithic}
PS: I use this configuration at Catalina using Clang compiler....

After you make ready the dependencies,
then extract the wxHexEditor-ng and compile with:
tar xvf wxHexEditor-ng-v<version>-src.tar.bz2
cd wxHexEditor-ng
make mac WXCONFIG=<wx-config path>

Opps! I forgot to say that, you probably need to remove -lgomp flag from Makefile.

If everything is OK, you can also execute program with this command:
./wxHexEditor-ng.app/Contents/MacOS/wxHexEditor-ng

That's all.

-----------------------------------------------------
BSD
-----------------------------------------------------
First of all, you need to install all dependencies.
In FreeBSD 12.0, you can use pkg command

pkg install autotools wx31-gtk3 gmake openmp python

Then extract the wxHexEditor-ng and compile with:
tar xvf wxHexEditor-ng-v<version>-src.tar.bz2
cd wxHexEditor-ng
gmake WXCONFIG=<wx-config path>

for example : gmake WXCONFIG=wxgtk3u-3.1-config

If you are lucky, this will compile the (dependencies mhash and udis86 than) program without any error.

